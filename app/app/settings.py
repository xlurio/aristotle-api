"""
Django settings for app project.

Generated by 'django-admin startproject' using Django 4.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

import os
from pathlib import Path

PRODUCTION_ENVIRONMENT = "production"

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!


def get_secret_key() -> str:
    """Return the secret key based on the running environment

    Returns:
        str: the secret key
    """
    environment = os.environ.get("APP_ENVIRONMENT")

    if environment == PRODUCTION_ENVIRONMENT:
        return os.environ.get("DJANGO_SECRET_KEY")

    return "django-insecure-c#kf9*52rq%yod6vxm-2@hlf^fy#@1vly_&+p^otr$z#+-4y4*"


SECRET_KEY = get_secret_key()


def get_debug_settings() -> str:
    """Return the debug settings based on the running environment

    Returns:
        str: the debug settings
    """
    environment = os.environ.get("APP_ENVIRONMENT")

    if environment == PRODUCTION_ENVIRONMENT:
        return False

    return True


DEBUG = get_debug_settings()


def get_allowed_hosts_settings() -> list[str]:
    """Return the allowed hosts settings based on the running environment

    Returns:
        str: the allowed hosts settings
    """
    environment = os.environ.get("APP_ENVIRONMENT")

    if environment == PRODUCTION_ENVIRONMENT:
        return ["localhost", "127.0.0.1"]

    return []


ALLOWED_HOSTS = get_allowed_hosts_settings()


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "rest_framework.authtoken",
    "core",
    "user_register",
    "classroom_creation",
    "grade_register",
    "absence_register",
    "student_consulting",
    "teacher_consulting",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "app.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "app.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases


def get_database_settings() -> dict[str, str]:
    """Return the settings to database based on the running environment

    Returns:
        dict[str, str]: the database settings
    """
    environment = os.environ.get("APP_ENVIRONMENT")

    if environment == PRODUCTION_ENVIRONMENT:
        return {
            "default": {
                "ENGINE": "django.db.backends.mysql",
                "NAME": os.environ.get("DATABASE_NAME"),
                "USER": os.environ.get("DATABASE_USER"),
                "PASSWORD": os.environ.get("DATABASE_PASSWORD"),
                "HOST": os.environ.get("DATABASE_HOST"),
                "PORT": os.environ.get("DATABASE_PORT"),
            }
        }

    return {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }


DATABASES = get_database_settings()


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": (
            "django.contrib.auth.password_validation."
            "UserAttributeSimilarityValidator"
        ),
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = "static/"
MEDIA_URL = "media/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Authentication

AUTH_USER_MODEL = "core.User"

# Caching


def get_cache_settings() -> dict[str, str]:
    """Return the settings to cache based on the running environment

    Returns:
        dict[str, str]: the cache settings
    """
    environment = os.environ.get("APP_ENVIRONMENT")

    if environment == PRODUCTION_ENVIRONMENT:
        return {
            "default": {
                "BACKEND": "django.core.cache.backends.redis.RedisCache",
                "LOCATION": (
                    f"redis://{os.environ.get('CACHE_BACKEND_HOST')}:"
                    f"{os.environ.get('CACHE_BACKEND_PORT')}"
                ),
            }
        }

    return {
        "default": {
            "BACKEND": "django.core.cache.backends.dummy.DummyCache",
        }
    }


CACHES = get_cache_settings()

# Security

is_deploy = os.environ.get("IS_DEPLOY", 0)

if is_deploy == 1:
    SECURE_HSTS_SECONDS = 259200
    SECURE_SSL_REDIRECT = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
